<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GW2NET.MumbleLink</name>
  </assembly>
  <members>
    <member name="T:GW2NET.MumbleLink.Avatar">
      <summary>Represents a player's avatar.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.AvatarFront">
      <summary>Gets or sets the unit vector pointing out of the avatars eyes.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.AvatarPosition">
      <summary>Gets or sets the position of the avatar.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.AvatarTop">
      <summary>Gets or sets the unit vector pointing out of the top of the avatars head.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.CameraFront">
      <summary>Gets or sets the unit vector pointing out of the camera.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.CameraPosition">
      <summary>Gets or sets the position of the camera.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.Context">
      <summary>Gets or sets the avatar's context.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.Identity">
      <summary>Gets or sets the avatar's identity.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.UiTick">
      <summary>Gets or sets a numeric value that is used for change tracking.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Avatar.UiVersion">
      <summary>Gets or sets the UI version.</summary>
    </member>
    <member name="T:GW2NET.MumbleLink.AvatarContext">
      <summary>Provides contextual data about a player's avatar. Check the <see cref="T:GW2NET.MumbleLink.AvatarContext" /> of two different players for equality to determine if the players are in the same map instance.</summary>
    </member>
    <member name="M:GW2NET.MumbleLink.AvatarContext.Equals(GW2NET.MumbleLink.AvatarContext)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:GW2NET.MumbleLink.AvatarContext.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object. </param>
    </member>
    <member name="M:GW2NET.MumbleLink.AvatarContext.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:GW2NET.MumbleLink.AvatarContext.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.BuildId">
      <summary>Gets or sets the game client's build identifier.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.Instance">
      <summary>Gets or sets the instance identifier of the current instance.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.MapId">
      <summary>Gets or sets the identifier of the current map.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.MapType">
      <summary>Gets or sets the type of the current map.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.ServerAddress">
      <summary>Gets or sets the address of the server to which the game client is currently connected.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.AvatarContext.ShardId">
      <summary>Gets or sets the shard identifier of the current shard.</summary>
    </member>
    <member name="T:GW2NET.MumbleLink.Identity">
      <summary>Provides contextual information about a player's avatar.</summary>
    </member>
    <member name="M:GW2NET.MumbleLink.Identity.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.Commander">
      <summary>Gets or sets a value indicating whether the avatar is commanding a squad.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.Map">
      <summary>Gets or sets the current map. This is a navigation property. Use the value of <see cref="P:GW2NET.MumbleLink.Identity.MapId" /> to obtain a reference.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.MapId">
      <summary>Gets or sets the identifier of the current map.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.Name">
      <summary>Gets or sets the name of the avatar.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.Profession">
      <summary>Gets or sets the avatar's profession.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.TeamColor">
      <summary>Gets or sets the current team color. This is a navigation property. Use the value of <see cref="P:GW2NET.MumbleLink.Identity.TeamColorId" /> to obtain a reference.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.TeamColorId">
      <summary>Gets or sets the identifier of the current team color.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.World">
      <summary>Gets or sets the current world. This is a navigation property. Use the value of <see cref="P:GW2NET.MumbleLink.Identity.WorldId" /> to obtain a reference.</summary>
    </member>
    <member name="P:GW2NET.MumbleLink.Identity.WorldId">
      <summary>Gets or sets the identifier of the current world.</summary>
    </member>
    <member name="T:GW2NET.MumbleLink.MumbleLinkFile">
      <summary>Provides an implementation of the Mumble Link protocol.</summary>
      <example>
        <code>
            using (var mumbler = new MumbleLinkFile())
            {
                var avatar = mumbler.Read();
                Console.WriteLine("Hello " + avatar.Identity.Name + "!");
            }
            </code>
      </example>
      <summary>Contains interoperability types.</summary>
    </member>
    <member name="F:GW2NET.MumbleLink.MumbleLinkFile.mumbleLink">
      <summary>Holds a reference to the shared memory block.</summary>
    </member>
    <member name="F:GW2NET.MumbleLink.MumbleLinkFile.size">
      <summary>The size of the shared memory block.</summary>
    </member>
    <member name="F:GW2NET.MumbleLink.MumbleLinkFile.disposed">
      <summary>Indicates whether this object is disposed.</summary>
    </member>
    <member name="M:GW2NET.MumbleLink.MumbleLinkFile.#ctor">
      <summary>Initializes a new instance of the <see cref="T:GW2NET.MumbleLink.MumbleLinkFile" /> class.</summary>
    </member>
    <member name="M:GW2NET.MumbleLink.MumbleLinkFile.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:GW2NET.MumbleLink.MumbleLinkFile.Read">
      <summary>Retrieves positional audio data from the shared memory block as defined by the Mumble Link protocol.</summary>
      <returns>Positional audio data as an instance of the <see cref="T:GW2NET.MumbleLink.Avatar" /> class.</returns>
    </member>
    <member name="M:GW2NET.MumbleLink.MumbleLinkFile.Dispose(System.Boolean)">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
      <param name="disposing">
        <c>true</c> if managed resources should be released.</param>
    </member>
  </members>
</doc>